// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  password  String
  createAt  DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  profile   Profile?

  @@map(name: "users")
}

model Profile {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  nickname    String
  description String
  posts       Post[]
  image       Image?
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String? @unique @db.ObjectId

  @@map(name: "profiles")
}

model Post {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  revenue    Revenue?
  profile    Profile  @relation(fields: [profilesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profilesId String   @db.ObjectId

  @@map(name: "posts")
}

model Revenue {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  foodName        String
  foodDescription String
  ingredients     String
  preparation     String[]
  preparationTime Int
  createAt        DateTime @default(now())
  updateAt        DateTime @updatedAt
  image           Image?
  post            Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId          String   @unique @db.ObjectId

  @@map(name: "revenues")
}

model Image {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  file         String
  mimeType     String
  originalName String
  revenue      Revenue? @relation(fields: [revenueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  revenueId    String?  @unique @db.ObjectId
  profile      Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId    String?  @unique @db.ObjectId

  @@map(name: "images")
}
